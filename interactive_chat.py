#!/usr/bin/env python3
import requests
import json
import readline  # C·∫£i thi·ªán tr·∫£i nghi·ªám input
from tts_module import VietnameseTTS
import re

# --- C·∫•u h√¨nh ---
OLLAMA_API_URL = "http://127.0.0.1:11434/api/chat"
MODEL_NAME = "qwen3:0.6b"  # Thay ƒë·ªïi model n·∫øu c·∫ßn
SYSTEM_PROMPT = (
    "B·∫°n l√† Lisa. b·∫°n l√† tr·ª£ l√≠ t∆∞ v·∫•n th√¥ng tin "
    "Ch·ªâ tr·∫£ l·ªùi tr·ª±c ti·∫øp cho ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát, "
    "khi ai h·ªèi b·∫°n l√† ai th√¨ tr·∫£ l·ªùi b·∫°n l√† tr·ª£ l√Ω ƒë∆∞·ª£c t·∫°o ra b·ªüi IS LAB c·ªßa tr∆∞·ªùng ƒë·∫°i h·ªçc s∆∞ ph·∫°m kƒ© thu·∫≠t TP.HCM."
)

def remove_think_blocks(text):
    return re.sub(r"", "", text, flags=re.DOTALL).strip()

class QwenInteractiveChat:
    """
    L·ªõp qu·∫£n l√Ω phi√™n chat t∆∞∆°ng t√°c v·ªõi Qwen v√† TTS.
    """
    def __init__(self, enable_tts=True, lang='vi'):
        """
        Kh·ªüi t·∫°o session chat.
        
        Args:
            enable_tts (bool): B·∫≠t/t·∫Øt TTS.
            lang (str): Ng√¥n ng·ªØ cho TTS.
        """
        self.messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        self.enable_tts = enable_tts
        if self.enable_tts:
            self.tts = VietnameseTTS(lang=lang)
        else:
            self.tts = None

    def _get_qwen_response(self, stream=True):
        """
        G·ª≠i y√™u c·∫ßu ƒë·∫øn Ollama v√† x·ª≠ l√Ω ph·∫£n h·ªìi.
        
        Args:
            stream (bool): B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô stream.
            
        Returns:
            str: To√†n b·ªô n·ªôi dung ph·∫£n h·ªìi t·ª´ model, ho·∫∑c None n·∫øu c√≥ l·ªói.
        """
        payload = {
            "model": MODEL_NAME,
            "messages": self.messages,
            "stream": stream,
            "think": False
        }
        
        full_response = ""
        try:
            # G·ª≠i y√™u c·∫ßu POST
            response_stream = requests.post(OLLAMA_API_URL, json=payload, stream=stream)
            response_stream.raise_for_status()
            
            print("ü§ñ Qwen: ", end="", flush=True)
            
            # X·ª≠ l√Ω t·ª´ng d√≤ng d·ªØ li·ªáu stream
            for line in response_stream.iter_lines():
                if line:
                    data = json.loads(line.decode('utf-8'))
                    chunk = data.get("message", {}).get("content", "")
                    print(chunk, end="", flush=True)
                    full_response += chunk
                    
                    # D·ª´ng l·∫°i khi message cu·ªëi c√πng ƒë∆∞·ª£c g·ª≠i
                    if data.get("done"):
                        break
            
            print()  # In d√≤ng m·ªõi sau khi ho√†n th√†nh
            return full_response
            
        except requests.RequestException as e:
            print(f"\n‚ùå L·ªói khi g·ªçi API Ollama: {e}")
            return None
        except json.JSONDecodeError:
            print("\n‚ùå L·ªói gi·∫£i m√£ JSON t·ª´ API.")
            return None

    def start(self):
        """
        B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p chat t∆∞∆°ng t√°c.
        """
        print(" Chatbot Qwen v·ªõi Gi·ªçng n√≥i ƒë√£ s·∫µn s√†ng.")
        print("   (G√µ 'quit' ho·∫∑c 'exit' ƒë·ªÉ tho√°t)")
        print("=" * 50)
        
        try:
            while True:
                # L·∫•y input t·ª´ ng∆∞·ªùi d√πng
                user_input = input("üë§ B·∫°n: ").strip()
                
                if not user_input:
                    continue
                
                # Ki·ªÉm tra l·ªánh tho√°t
                if user_input.lower() in ["quit", "exit"]:
                    print("üëã T·∫°m bi·ªát!")
                    break
                
                # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
                self.messages.append({"role": "user", "content": user_input})
                
                # L·∫•y ph·∫£n h·ªìi t·ª´ Qwen
                qwen_response = self._get_qwen_response()
                clean_response = remove_think_blocks(qwen_response)
                
                if clean_response:
                    # Th√™m ph·∫£n h·ªìi c·ªßa Qwen v√†o l·ªãch s·ª≠ ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
                    self.messages.append({"role": "assistant", "content": clean_response})
                    
                    # Ph√°t gi·ªçng n√≥i n·∫øu TTS ƒë∆∞·ª£c b·∫≠t
                    if self.enable_tts and self.tts:
                        print("... üîä ƒêang ph√°t gi·ªçng n√≥i ...")
                        self.tts.text_to_speech(clean_response, auto_play=True, auto_delete=True)
                
                print("-" * 50)
                
        except (KeyboardInterrupt, EOFError):
            print("\nüëã T·∫°m bi·ªát!")
        finally:
            # D·ªçn d·∫πp t√†i nguy√™n
            if self.enable_tts and self.tts:
                self.tts.cleanup()

if __name__ == "__main__":
    # Kh·ªüi t·∫°o v√† b·∫Øt ƒë·∫ßu session chat
    chat_session = QwenInteractiveChat(enable_tts=True)
    chat_session.start() 