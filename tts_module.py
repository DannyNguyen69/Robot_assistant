from gtts import gTTS
import os
import subprocess
import tempfile
from typing import Optional, Union

class VietnameseTTS:
    """
    Module chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n ti·∫øng Vi·ªát th√†nh gi·ªçng n√≥i.
    C√≥ th·ªÉ t√≠ch h·ª£p v·ªõi c√°c chatbot nh∆∞ Qwen.
    """
    
    def __init__(self, lang='vi', slow=False, use_system_player=True):
        """
        Kh·ªüi t·∫°o VietnameseTTS.
        
        Args:
            lang (str): Ng√¥n ng·ªØ (m·∫∑c ƒë·ªãnh: 'vi' cho ti·∫øng Vi·ªát)
            slow (bool): T·ªëc ƒë·ªô n√≥i ch·∫≠m (m·∫∑c ƒë·ªãnh: False)
            use_system_player (bool): S·ª≠ d·ª•ng l·ªánh h·ªá th·ªëng ƒë·ªÉ ph√°t (m·∫∑c ƒë·ªãnh: True)
        """
        self.lang = lang
        self.slow = slow
        self.use_system_player = use_system_player
        self.temp_dir = tempfile.mkdtemp()
        
    def text_to_speech(self, text: str, filename: Optional[str] = None, 
                      auto_play: bool = True, auto_delete: bool = True) -> Optional[str]:
        """
        Chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i.
        
        Args:
            text (str): VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
            filename (str, optional): T√™n file output (m·∫∑c ƒë·ªãnh: t·ª± ƒë·ªông t·∫°o)
            auto_play (bool): T·ª± ƒë·ªông ph√°t √¢m thanh (m·∫∑c ƒë·ªãnh: True)
            auto_delete (bool): T·ª± ƒë·ªông x√≥a file sau khi ph√°t (m·∫∑c ƒë·ªãnh: True)
            
        Returns:
            str: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
        """
        try:
            # T·∫°o t√™n file n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
            if filename is None:
                filename = os.path.join(self.temp_dir, f"tts_{hash(text) % 10000}.mp3")
            
            # T·∫°o gi·ªçng n√≥i
            tts = gTTS(text=text, lang=self.lang, slow=self.slow)
            tts.save(filename)
            
            print(f"‚úÖ ƒê√£ t·∫°o file √¢m thanh: {filename}")
            
            # Ph√°t √¢m thanh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
            if auto_play:
                self.play_audio(filename)
                
                # X√≥a file n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                if auto_delete:
                    try:
                        os.remove(filename)
                        print(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m: {filename}")
                    except:
                        pass
            
            return filename
            
        except Exception as e:
            print(f"‚ùå L·ªói khi chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh gi·ªçng n√≥i: {e}")
            return None
    
    def play_audio(self, filepath: str) -> bool:
        """
        Ph√°t file √¢m thanh.
        
        Args:
            filepath (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh
            
        Returns:
            bool: True n·∫øu ph√°t th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if self.use_system_player:
                return self._play_with_system(filepath)
            else:
                return self._play_with_playsound(filepath)
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√°t √¢m thanh: {e}")
            return False
    
    def _play_with_system(self, filepath: str) -> bool:
        """Ph√°t √¢m thanh b·∫±ng l·ªánh h·ªá th·ªëng."""
        try:
            # Th·ª≠ c√°c l·ªánh ph√°t √¢m thanh kh√°c nhau
            players = ['mpg123', 'ffplay', 'aplay', 'cvlc']
            
            for player in players:
                try:
                    if player == 'mpg123':
                        subprocess.run([player, filepath], check=True, 
                                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    elif player == 'ffplay':
                        subprocess.run([player, '-nodisp', '-autoexit', filepath], 
                                     check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    elif player == 'aplay':
                        subprocess.run([player, filepath], check=True, 
                                     stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    elif player == 'cvlc':
                        subprocess.run([player, '--play-and-exit', filepath], 
                                     check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    
                    print(f"üîä ƒê√£ ph√°t: {filepath}")
                    return True
                    
                except (subprocess.CalledProcessError, FileNotFoundError):
                    continue
            
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y tr√¨nh ph√°t √¢m thanh ph√π h·ª£p")
            return False
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√°t b·∫±ng l·ªánh h·ªá th·ªëng: {e}")
            return False
    
    def _play_with_playsound(self, filepath: str) -> bool:
        """Ph√°t √¢m thanh b·∫±ng th∆∞ vi·ªán playsound."""
        try:
            import playsound
            playsound.playsound(filepath)
            print(f"üîä ƒê√£ ph√°t: {filepath}")
            return True
        except ImportError:
            print("‚ö†Ô∏è Th∆∞ vi·ªán playsound ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            return False
        except Exception as e:
            print(f"‚ùå L·ªói khi ph√°t b·∫±ng playsound: {e}")
            return False
    
    def speak_response(self, response: str, auto_delete: bool = True) -> Optional[str]:
        """
        Ph√°t gi·ªçng n√≥i cho response t·ª´ chatbot.
        
        Args:
            response (str): Response t·ª´ chatbot
            auto_delete (bool): T·ª± ƒë·ªông x√≥a file sau khi ph√°t
            
        Returns:
            Optional[str]: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh ho·∫∑c None n·∫øu l·ªói
        """
        print(f"ü§ñ Qwen: {response}")
        return self.text_to_speech(response, auto_play=True, auto_delete=auto_delete)
    
    def cleanup(self):
        """D·ªçn d·∫πp c√°c file t·∫°m."""
        try:
            import shutil
            shutil.rmtree(self.temp_dir)
            print(f"üßπ ƒê√£ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: {self.temp_dir}")
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªçn d·∫πp th∆∞ m·ª•c t·∫°m: {e}")

# H√†m ti·ªán √≠ch ƒë·ªÉ t√≠ch h·ª£p nhanh
def speak_text(text: str, lang: str = 'vi', auto_play: bool = True) -> Optional[str]:
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i nhanh ch√≥ng.
    
    Args:
        text (str): VƒÉn b·∫£n c·∫ßn chuy·ªÉn ƒë·ªïi
        lang (str): Ng√¥n ng·ªØ (m·∫∑c ƒë·ªãnh: 'vi')
        auto_play (bool): T·ª± ƒë·ªông ph√°t √¢m thanh
        
    Returns:
        Optional[str]: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh ho·∫∑c None n·∫øu l·ªói
    """
    tts = VietnameseTTS(lang=lang)
    return tts.text_to_speech(text, auto_play=auto_play)

def speak_qwen_response(response: str) -> Optional[str]:
    """
    H√†m ti·ªán √≠ch ƒë·ªÉ ph√°t response t·ª´ Qwen.
    
    Args:
        response (str): Response t·ª´ Qwen
        
    Returns:
        Optional[str]: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file √¢m thanh ho·∫∑c None n·∫øu l·ªói
    """
    tts = VietnameseTTS()
    return tts.speak_response(response)

# V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    # T·∫°o instance TTS
    tts = VietnameseTTS()
    
    # V√≠ d·ª• 1: Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i
    print("=== V√≠ d·ª• 1: Chuy·ªÉn vƒÉn b·∫£n th√†nh gi·ªçng n√≥i ===")
    tts.text_to_speech("Xin ch√†o, t√¥i l√† Qwen, tr·ª£ l√Ω AI c·ªßa b·∫°n!")
    
    # V√≠ d·ª• 2: Ph√°t response t·ª´ chatbot
    print("\n=== V√≠ d·ª• 2: Ph√°t response t·ª´ chatbot ===")
    tts.speak_response("T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√°c c√¢u h·ªèi v√† th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• kh√°c nhau.")
    
    # V√≠ d·ª• 3: S·ª≠ d·ª•ng h√†m ti·ªán √≠ch
    print("\n=== V√≠ d·ª• 3: S·ª≠ d·ª•ng h√†m ti·ªán √≠ch ===")
    speak_text("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa t√¥i!")
    
    # D·ªçn d·∫πp
    tts.cleanup() 